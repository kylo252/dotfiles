#!/usr/bin/env tmux

# -----------------------------------------------------------------------------
# Global options
# -----------------------------------------------------------------------------

# set the default TERM
if-shell 'infocmp $TERM' { set default-terminal "$TERM" } { set default-terminal tmux-256color }

# Enable RGB (truecolor)
set -a terminal-features '*:RGB'

# Enable colored underlines (e.g. in Vim)
set -a terminal-features '*:usstyle'

set -ga terminal-overrides ",alacritty:RGB"
set -ga terminal-overrides ",*256col*:Tc"

# fix the cursor shape https://github.com/neovim/neovim/issues/5096#issuecomment-469027417
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
# undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# underscore colours - needs tmux-3.0
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Use extended keys (CSI u)
set -g extended-keys on

## update the TERM variable of terminal emulator when creating a new session or attaching a existing session
set -g update-environment 'DISPLAY SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY TERM'

# Allow opening multiple terminals to view the same session at different sizes.
setw -g aggressive-resize off

# Remove delay when switching between Vim modes.
# setting this to 0 causes gibberish prompt on startup
set -sg escape-time 3

# Add a bit more scroll history in the buffer.
set -g history-limit 50000

# Ensure window titles get renamed immediately.
setw -g automatic-rename off # this one is polling the status

# more frequent updates
set -g status-interval 1

# Ensure window index numbers get reordered on delete.
set -g renumber-windows on

# Start windows and panes index at 1, not 0.
set -g base-index 1
setw -g pane-base-index 1

# Enable full mouse support.
set -g mouse on

set -g status-position top

# Enable focus events
set -g focus-events on

# Allow tmux to set the title of the terminal emulator
set -g set-titles on
set -g set-titles-string "#S"

# -----------------------------------------------------------------------------
# Key bindings
# -----------------------------------------------------------------------------

# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set -g status-keys emacs

# Set a new prefix / leader key.
set -g prefix C-a
bind C-a send-prefix

# Unbind default keys
# unbind C-b
unbind '"'
unbind %
# this seems to fix the lag/issue with the control flow
unbind -n C-s
# don't suspend-client
unbind C-z

# Reload the tmux config.
bind R run-shell 'tmux source-file ${XDG_CONFIG_HOME}/tmux/tmux.conf && tmux display-message "config reloaded"'

# Split panes.
bind c new-window -c '#{pane_current_path}'

# bind -n S-down new-window
bind b split-window -v -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'

bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

unbind l # normally used for last-window
# bind l select-pane -R

# Fast toggle between current and last-used window (normally prefix-l).
bind C-a last-window

# Make switching between windows easier
bind C-p previous-window
bind C-n next-window

# beginning of the line
bind a send-prefix
# kill line 
bind k send-keys 'ctrl-k'

# clear screen now with <prefix><ctrl-l>
bind C-l send-keys 'C-l' \;  run-shell "sleep .3s" \; clear-history

# yet another try..
bind -n Home send Escape "OH"
bind -n End send Escape "OF"

bind p paste-buffer

bind -n C-F11 'set -s status'

# extra shells
unbind t

bind M-b split-window -v -c '#{pane_current_path}' "bash -l"
bind -n M-n split-window -h -c '#{pane_current_path}' "nvim"

bind -n M-e split-window -hb -l 30% -c '#{pane_current_path}' "lf -command 'set preview!; set info; set ratios 1'"

bind -n M-c kill-pane

# -----------------------------------------------------------------------------
# vim
# -----------------------------------------------------------------------------

# Use vi keys in copy mode
set -gw mode-keys vi

# NOTE: checking `#{pane_current_command}` does not work when neovim is invoked from another program, e.g. `lf`.
is_vim="ps -o command= -t '#{pane_tty}' | rg -o '^(n?l?vim)'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 1'
bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 1'
bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 1'
bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 1'

bind -T copy-mode-vi M-h resize-pane -L 1
bind -T copy-mode-vi M-j resize-pane -D 1
bind -T copy-mode-vi M-k resize-pane -U 1
bind -T copy-mode-vi M-l resize-pane -R 1

# Make vi copy mode more vim-like
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle

# -----------------------------------------------------------------------------
# dwm.tmux
# -----------------------------------------------------------------------------

set -g command-alias[100] newpane='run-shell "dwm-tmux newpane"'
set -g command-alias[101] rotateccw='run-shell "dwm-tmux rotateccw"'
set -g command-alias[102] rotatecw='run-shell "dwm-tmux rotatecw"'
set -g command-alias[103] focus='run-shell "dwm-tmux focus"'
set -g command-alias[104] layouttile='run-shell "dwm-tmux layouttile"'
set -g command-alias[105] zoom='run-shell "dwm-tmux zoom"'
set -g command-alias[106] float='run-shell "dwm-tmux float"'
set -g command-alias[107] togglepane='run-shell "dwm-tmux togglepane"'

bind Enter togglepane
bind C-Space focus
bind -n M-< rotateccw
bind -n M-> rotatecw
bind -n M-t layouttile
bind -n M-f float
unbind -n C-t

# -----------------------------------------------------------------------------
# float control
# -----------------------------------------------------------------------------

# turn off status-line for scratch sessions
set-hook -g client-session-changed {
  if-shell -F '#{==:#{session_name},scratch}' { set -s status off } { set -s status on }
}

bind -n M-u run-shell -b "fman-tmux"
bind -n M-o run-shell -b "fman-tmux -c lf"

bind g run-shell -b "fman-tmux -c lazygit"
bind C-g run-shell -b "fman-tmux -c 'git dots-lazy'"
bind J run-shell -b "lnav-tmux"

# -----------------------------------------------------------------------------
# fzfp.tmux
# -----------------------------------------------------------------------------

TMUX_FZF_OPTIONS="-p -w 85% -h 60% -m"
TMUX_FZF_LAUNCH_KEY="c-f"
TMUX_FZF_ORDER='window|pane|keybinding|session|clipboard|process|command'
set-environment -g TMUX_FZF_SCRIPTS_DIR "${XDG_DATA_HOME}/tmux/plugins/tmux-fzf/scripts"
set -g command-alias[110] switch_window='run-shell -b "${TMUX_FZF_SCRIPTS_DIR}/window.sh switch"'
set -g command-alias[111] attach_session='run-shell -b "${TMUX_FZF_SCRIPTS_DIR}/session.sh attach"'
set -g command-alias[112] link_pane='run-shell -b "${TMUX_FZF_SCRIPTS_DIR}/pane.sh link"'


bind j switch_window
bind s attach_session

# -----------------------------------------------------------------------------
# Plugins and styles
# -----------------------------------------------------------------------------

# set to $XDG_DATA_HOME instead
set-environment -g TMUX_PLUGIN_MANAGER_PATH "${XDG_DATA_HOME}/tmux/plugins"

set -g @plugin 'tmux-plugins/tpm'

# set -g @plugin 'tmux-plugins/tmux-battery'

set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
if-shell "command -v xdg-open 2>/dev/null" { set -g @plugin 'tmux-plugins/tmux-open' }

set -g @plugin 'sainnhe/tmux-fzf'

# buffer yank extraction
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'fcsonline/tmux-thumbs'

# themes
run-shell -b "${XDG_CONFIG_HOME}/tmux/scripts/theme.tmux"

# plugins config
set -g @resurrect-dir "${HOME}/.cache/tmux/resurrect"
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-save 'S'
set -g @resurrect-restore 'M-r'

set -g @resurrect-strategy-nvim 'session'
set -g @continuum-restore 'off'
# set -g @resurrect-processes "~nvim->`tmux display -p '#{pane_pid}' | xargs pgrep -a -P | cut -d ' ' -f2-`"

# set -g status-right 'Continuum status: #{continuum_status}'

set -g @yank_selection_mouse 'clipboard' # or 'primary' or 'secondary'

set -g @thumbs-key F

set -g @extrakto_key tab
set -g @extrakto_popup_size 60%
set -g @extrakto_split_size "15"
set -g @extrakto_clip_tool "xsel -p -i" # works better for nvim
set -g @extrakto_copy_key "y"      # use tab to copy to clipboard
set -g @extrakto_insert_key "enter"  # use enter to insert selection

# Initialize TPM (keep this line at the very bottom of your tmux.conf).
run -b "${XDG_DATA_HOME}/tmux/plugins/tpm/tpm"
