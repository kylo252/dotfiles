#compdef git-review
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for git-review (https://github.com/openstack-infra/git-review)
#
#  Credits: https://github.com/streetturtle/git-review-zsh-completion
#
# ------------------------------------------------------------------------------

_git-review() {

  local curcontext="$curcontext" ret=1

  _arguments -s \
    '(-h --help)'{-h,--help}'[show this help message and exit]' \
    '(-t,--topic)'{-t,--topic}'[topic to submit branch to]' \
    '(-T,--no-topic)'{-T,--no-topic}'[no topic except if explicitly provided]' \
    '--reviewer'--reviewer'[add reviewers to uploaded patch sets]' \
    '(-D,--draft)'{-D,--draft}'[submit review as a draft]' \
    '(-c,--compatible)'{-c,--compatible}'[push change to refs/for/* for compatibility with Gerrit versions < 2.3. Ignored if -D/--draft is used]' \
    '(-n,--dry-run)'{-n,--dry-run}'[don''t actually submit the branch for review]' \
    '(-i,--new-changeid)'{-i,--new-changeid}'[regenerate Change-id before submitting]' \
    '(-r,--remote)'{-r,--remote}'[git remote to use for gerrit]' \
    '--use-pushurl'--use-pushurl'[use remote push-url logic instead of separate remotes]' \
    '--notify'--notify'[Control to whom email notifications are sent, defaults to ALL]' \
    '(-R,--no-rebase)'{-R,--no-rebase}'[dont rebase changes before submitting]' \
    '(-F,--force-rebase)'{-F,--force-rebase}'[force rebase even when not needed]' \
    '--track'--track'[use tracked branch as default]' \
    '--no-track'--no-track'[ignore tracked branch]' \
    '(-d,--download)'{-d,--download}'[download the contents of an existing gerrit review into a branch]:branch:->branch' \
    '(-x,--cherrypick)'{-x,--cherrypick}'[apply the contents of an existing gerrit review onto the current branch and commit (cherry pick; not recommended in most situations)]' \
    '(-X,--cherrypickindicate)'{-X,--cherrypickindicate}'[apply the contents of an existing gerrit review onto the current branch and commit, indicating its origin]' \
    '(-N,--cherrypickonly)'{-N,--cherrypickonly}'[apply the contents of an existing gerrit review to the working directory and prepare for commit]' \
    '(-m,--compare)'{-m,--compare}'[download specified and latest (or NEW_PS) patchsets of an existing gerrit review into a branches, rebase on master (skipped on conflicts or when -R is specified) and show their differences]' \
    '(-u,--update)'{-u,--update}'[force updates from remote locations]' \
    '(-s,--setup)'{-s,--setup}'[just run the repo setup commands but don''t submit anything]' \
    '(-f,--finish)'{-f,--finish}'[close down this branch and switch back to master on successful submission]' \
    '(-l,--list)'{-l,--list}'[list available reviews for the current project, if passed more than once, will show more information]' \
    '(-y,--yes)'{-y,--yes}'[indicate that you do, in fact, understand if you are submitting more than one patch]' \
    '(-v,--verbose)'{-v,--verbose}'[output more information about what''s going on]' \
    '(-w, --work-in-progress)'{-w, --work-in-progress}'[Send patch as work in progress for Gerrit versions >= 2.15]' \
    '(-p,--private)'{-p,--private}'[ Send patch as a private patch ready for review. Gerrit]' \
    '(-P,--remove-private)'{-P,--remove-private}'[ Send patch which already in private state to normal]' \
    '--no-custom-script'--no-custom-script'[do not run custom scripts]' \
    '--color'--color'[show color output. --color (without <when>) is the same as --color=always. <when> can be one of always, never, auto. Behaviour can also be controlled by the color.ui and color.review configuration settings.'] \
    '--no-color'--no-color'[turn off colored output. Can be used to override configuration options. Same as setting --color=never]' \
    '--license'--license'[print the license and exit]' \
    '--version'--version'[show program''s version number and exit]' && ret=0

  case "$state" in
    branch)
      cmd=( ${(f)"$(git-review -l | grep -w '^[0-9]*' | sed 's/\([[:digit:]]*\)/\1:/')"} )
      _describe -t branch branch cmd && ret=0
      ;;
  esac

  return $ret
}

_git-review "$@"
